{
    "post_table": {
        "prefix": "post_table",
        "body": [
          "      Schema::create('posts', function (Blueprint $table) {",
          "            $table->id();",
          "            $table->foreignId('user_id')->constrained()->onDelete('cascade');",
          "            $table->text('body');",
          "            $table->timestamps();",
          "        });"
        ],
        "description": "post_table"
      },
      "check_if_posts_belong": {
        "prefix": "post_belong_in_loop",
        "body": [
          "$post->contains('user_id',auth()->user())"
        ],
        "description": "check if posts belong"
      },
      "basic_request_validation": {
        "prefix": "basic_request_validation",
        "body": [
          "'name'=>'required|min:2|max:40|unique:categories',",
          " 'image'=>'required|mimes:png,jpg,jpeg'"
        ],
        "description": "basic_request_validation"
      },
      "show": {
        "prefix": "show",
        "body": [
          "$categories = Category::get();",
          "return view('backend.category.index', compact('categories'));"
        ],
        "description": "show"
      },
      "store": {
        "prefix": "store",
        "body": [
          "$image = $request->file('image')->store('public/category');",
          "Category::create([",
          "            'image'=>$image,",
          "            'name'=>$request->name,",
          "            'slug'=>Str::slug($request->name)",
          "]);",
          "return redirect()->back();"
        ],
        "description": "store"
      },
      "update": {
        "prefix": "update",
        "body": [
          "    $category = Category::find($id);",
          "        if ($request->hasFile('image')) {",
          "            Storage::delete($category->image);",
          "            $image = $request->file('image')->store('public/category');",
          "            $category->update(['name' => $request->name, 'image' => $image]);",
          "        }",
          "        $category->update(['name' => $request->name]);",
          "        return redirect()->route('category.index')->with('message', 'Category updated successfully');;"
        ],
        "description": "update"
      },
      "destory": {
        "prefix": "destory",
        "body": [
          "$category = Category::find($id);",
          "if (Storage::delete($category->image)) {",
          "    $category->delete();",
          "}",
          "return back()->with('message', 'Category deleted successfully');;"
        ],
        "description": "destory"
      },
      "edit": {
        "prefix": "edit",
        "body": [
          "      $category = Category::find($id);",
          "        return view('backend.category.edit', compact('category'));"
        ],
        "description": "edit"
      },
      "allow_user": {
        "prefix": "allow_user",
        "body": [
          "  if(auth()->user()->id === ''){",
          "        //allow",
          "    }"
        ],
        "description": "allow_user"
      },
      "add_to_table": {
        "prefix": "add_to_table",
        "body": [
          "php artisan make:migration add_blank_to_blank_table --table = blank"
        ],
        "description": "add_to_table"
      }
}